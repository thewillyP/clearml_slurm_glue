properties([
    parameters([
        string(name: 'runTime', defaultValue: '7-00:00:00', description: 'Run job time limit'),
        string(name: 'runCPUs', defaultValue: '4', description: 'CPUs to allocate for run'),
        string(name: 'runMem', defaultValue: '14G', description: 'Memory to allocate for run'),
        string(name: 'logDir', defaultValue: '/vast/wlp9800/logs', description: 'Log directory path'),
    ])
])

pipeline {
    agent any

    stages {
        stage('Detect Hostname') {
            steps {
                script {
                    env.EXEC_HOST = sh(script: "hostname", returnStdout: true).trim()
                    env.SSH_USER = sh(script: "whoami", returnStdout: true).trim()
                    echo "Executor host: ${env.EXEC_HOST}"
                    echo "SSH user: ${env.SSH_USER}"
                }
            }
        }

        stage('Checkout Scripts') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/thewillyP/clearml_slurm_glue.git']]
                ])
            }
        }

        stage('Run Agent') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-credentials',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${env.SSH_USER}@${env.EXEC_HOST} '
                            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}";
                            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}";
                            bash -s "${params.runTime}" "${params.runCPUs}" "${params.runMem}" "${params.logDir}"
                            ' < deploy/run_agent.sh
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'ClearML SLURM Glue agent started successfully!'
        }
        failure {
            echo 'Failed to start ClearML SLURM Glue agent.'
        }
        always {
            echo 'Pipeline completed.'
        }
    }
}
